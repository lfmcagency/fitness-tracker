// src/store/tasks.ts.new
import { create } from 'zustand';
import type { Task } from '@/types';

interface TaskState {
  tasks: Task[];
  isLoading: boolean;
  error: string | null;
  completedTasks: number;
  fetchTasks: () => Promise<void>;
  toggleTask: (taskId: number) => Promise<void>;
  addTask: (task: Omit<Task, 'id'>) => Promise<void>;
  removeTask: (taskId: number) => Promise<void>;
  updateTask: (taskId: number, updates: Partial<Task>) => Promise<void>;
}

export const useTaskStore = create<TaskState>((set, get) => ({
  tasks: [],
  isLoading: false,
  error: null,
  completedTasks: 0,

  fetchTasks: async () => {
    set({ isLoading: true, error: null });
    try {
      const response = await fetch('/api/tasks');
      const data = await response.json();
      
      if (data.success) {
        set({ 
          tasks: data.data,
          completedTasks: data.data.filter(task => task.completed).length,
          isLoading: false
        });
      } else {
        set({ error: data.message, isLoading: false });
      }
    } catch (error) {
      set({ error: 'Failed to fetch tasks', isLoading: false });
    }
  },

  toggleTask: async (taskId) => {
    const task = get().tasks.find(t => t.id === taskId);
    if (!task) return;

    try {
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ completed: !task.completed })
      });
      
      const data = await response.json();
      
      if (data.success) {
        set((state) => {
          const updatedTasks = state.tasks.map(t =>
            t.id === taskId ? { ...t, completed: !t.completed } : t
          );
          return {
            tasks: updatedTasks,
            completedTasks: updatedTasks.filter(t => t.completed).length
          };
        });
      }
    } catch (error) {
      set({ error: 'Failed to update task' });
    }
  },

  addTask: async (task) => {
    try {
      const response = await fetch('/api/tasks', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(task)
      });
      
      const data = await response.json();
      
      if (data.success) {
        set((state) => ({
          tasks: [...state.tasks, data.data]
        }));
      }
    } catch (error) {
      set({ error: 'Failed to add task' });
    }
  },

  removeTask: async (taskId) => {
    try {
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'DELETE'
      });
      
      const data = await response.json();
      
      if (data.success) {
        set((state) => {
          const updatedTasks = state.tasks.filter(t => t.id !== taskId);
          return {
            tasks: updatedTasks,
            completedTasks: updatedTasks.filter(t => t.completed).length
          };
        });
      }
    } catch (error) {
      set({ error: 'Failed to remove task' });
    }
  },

  updateTask: async (taskId, updates) => {
    try {
      const response = await fetch(`/api/tasks/${taskId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });
      
      const data = await response.json();
      
      if (data.success) {
        set((state) => ({
          tasks: state.tasks.map(t =>
            t.id === taskId ? { ...t, ...updates } : t
          )
        }));
      }
    } catch (error) {
      set({ error: 'Failed to update task' });
    }
  }
}));