// Mark as dynamic
export const dynamic = 'force-dynamic';

import { NextRequest, NextResponse } from 'next/server';
import { dbConnect } from '@/lib/db';;
import Task, { ITask } from '@/models/Task';
import { getAuth } from '@/lib/auth';
import { EnhancedTask, ApiResponse, RecurrencePattern, TaskPriority } from '@/types';

// Default pagination values
const DEFAULT_PAGE = 1;
const DEFAULT_LIMIT = 20;

// Helper function to parse date or return null
const parseDate = (dateStr: string | null): Date | null => {
  if (!dateStr) return null;
  
  const date = new Date(dateStr);
  return isNaN(date.getTime()) ? null : date;
};

// Helper function to convert ITask to EnhancedTask
const convertTaskToEnhancedTask = (task: ITask): EnhancedTask => {
  return {
    _id: task._id.toString(),
    id: task._id.toString(),
    name: task.name,
    scheduledTime: task.scheduledTime,
    completed: task.completed,
    date: task.date,
    recurrencePattern: task.recurrencePattern,
    customRecurrenceDays: task.customRecurrenceDays,
    currentStreak: task.currentStreak,
    bestStreak: task.bestStreak,
    lastCompletedDate: task.lastCompletedDate,
    category: task.category,
    priority: task.priority,
    user: task.user.toString(),
    createdAt: task.createdAt?.toISOString(),
    updatedAt: task.updatedAt?.toISOString()
  };
};

/**
 * GET /api/tasks
 * 
 * Query parameters:
 * - date: specific date (YYYY-MM-DD) to filter tasks due on that date
 * - startDate: start of date range (YYYY-MM-DD)
 * - endDate: end of date range (YYYY-MM-DD)
 * - today: if 'true', filter tasks due today
 * - category: filter by category
 * - completed: if 'true', show only completed tasks; if 'false', show incomplete tasks
 * - includeHistory: if 'true', include completion history in response
 * - sort: field to sort by (priority, scheduledTime, name, currentStreak, bestStreak)
 * - order: sort order ('asc' or 'desc')
 * - page: page number for pagination
 * - limit: number of items per page
 */
export async function GET(req: NextRequest) {
  try {
    await dbConnect();
    const session = await getAuth();
    
    // For development, allow access even without authentication
    if (!session && process.env.NODE_ENV === 'production') {
      return NextResponse.json<ApiResponse<EnhancedTask[]>>({ 
        success: false, 
        message: 'Unauthorized' 
      }, { status: 401 });
    }
    
    // Get all query parameters
    const url = new URL(req.url);
    const dateParam = url.searchParams.get('date');
    const startDateParam = url.searchParams.get('startDate');
    const endDateParam = url.searchParams.get('endDate');
    const todayParam = url.searchParams.get('today');
    const categoryParam = url.searchParams.get('category');
    const completedParam = url.searchParams.get('completed');
    const includeHistoryParam = url.searchParams.get('includeHistory');
    const sortParam = url.searchParams.get('sort') || 'scheduledTime';
    const orderParam = url.searchParams.get('order') || 'asc';
    const pageParam = url.searchParams.get('page') || DEFAULT_PAGE.toString();
    const limitParam = url.searchParams.get('limit') || DEFAULT_LIMIT.toString();
    
    // Parse pagination params
    const page = Math.max(parseInt(pageParam, 10) || DEFAULT_PAGE, 1);
    const limit = Math.min(parseInt(limitParam, 10) || DEFAULT_LIMIT, 100);
    const skip = (page - 1) * limit;
    
    // Parse dates
    const date = parseDate(dateParam);
    const startDate = parseDate(startDateParam);
    const endDate = parseDate(endDateParam);
    const today = todayParam === 'true';
    
    // If we have a user session, query from the database
    if (session?.user?.id) {
      // Start building the query
      let query: any = { user: session.user.id };
      
      // Add category filter if provided
      if (categoryParam) {
        query.category = categoryParam;
      }
      
      // Add completion status filter if provided
      if (completedParam === 'true' || completedParam === 'false') {
        query.completed = completedParam === 'true';
      }
      
      // Add date filters
      if (today) {
        // No additional query filter needed for due tasks
        // We'll filter them after fetching, using the isTaskDueToday method
      } else if (date) {
        // No additional query filter needed for a specific date
        // We'll filter them after fetching
      } else if (startDate && endDate) {
        // For date range, filter tasks created within this range
        query.date = { 
          $gte: startDate, 
          $lte: endDate 
        };
      }
      
      // Count total documents for pagination
      const totalTasks = await Task.countDocuments(query);
      
      // Determine sort configuration
      const sortConfig: any = {};
      if (['priority', 'scheduledTime', 'name', 'currentStreak', 'bestStreak', 'category', 'createdAt'].includes(sortParam)) {
        sortConfig[sortParam] = orderParam === 'desc' ? -1 : 1;
      } else {
        sortConfig.scheduledTime = 1; // Default sort
      }
      
      // Execute the query with pagination
      const tasks = await Task.find(query)
        .sort(sortConfig)
        .skip(skip)
        .limit(limit)
        .exec() as ITask[];
      
      // Filter tasks that are due on the specified date if needed
      let filteredTasks = tasks;
      
      if (today) {
        const nowDate = new Date();
        filteredTasks = tasks.filter(task => task.isTaskDueToday(nowDate));
      } else if (date) {
        filteredTasks = tasks.filter(task => task.isTaskDueToday(date));
      }
      
      // Convert to EnhancedTask format and optionally include history
      const responseData = filteredTasks.map(task => {
        const enhancedTask = convertTaskToEnhancedTask(task);
        
        // If includeHistory is not true, remove the completion history
        if (includeHistoryParam !== 'true') {
          // @ts-ignore - we know this might exist due to conversion
          delete enhancedTask.completionHistory;
        }
        
        return enhancedTask;
      });
      
      // Return with pagination info
      return NextResponse.json<ApiResponse<EnhancedTask[]>>({
        success: true,
        data: responseData,
        pagination: {
          total: totalTasks,
          page,
          limit,
          pages: Math.ceil(totalTasks / limit)
        }
      });
    }
    
    // For development without a session, return mock data with filtering
    const mockTasks: EnhancedTask[] = [
      { 
        id: 1, 
        name: "Morning Weigh-in", 
        scheduledTime: "06:00", 
        completed: false, 
        currentStreak: 7,
        bestStreak: 12,
        recurrencePattern: "daily",
        category: "health",
        priority: "high",
        date: new Date().toISOString(),
        createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days ago
      },
      { 
        id: 2, 
        name: "Vitamin D + K2", 
        scheduledTime: "07:00", 
        completed: true, 
        currentStreak: 12,
        bestStreak: 30,
        recurrencePattern: "daily",
        category: "supplements",
        priority: "medium",
        date: new Date().toISOString(),
        lastCompletedDate: new Date().toISOString(),
        createdAt: new Date(Date.now() - 40 * 24 * 60 * 60 * 1000).toISOString() 
      },
      { 
        id: 3, 
        name: "Cold Shower", 
        scheduledTime: "07:15", 
        completed: false, 
        currentStreak: 5,
        bestStreak: 14,
        recurrencePattern: "daily",
        category: "recovery",
        priority: "medium",
        date: new Date().toISOString(),
        createdAt: new Date(Date.now() - 20 * 24 * 60 * 60 * 1000).toISOString()
      },
      { 
        id: 4, 
        name: "Mobility Work", 
        scheduledTime: "08:00", 
        completed: true, 
        currentStreak: 3,
        bestStreak: 21,
        recurrencePattern: "weekdays",
        category: "fitness",
        priority: "high",
        date: new Date().toISOString(),
        lastCompletedDate: new Date().toISOString(),
        createdAt: new Date(Date.now() - 25 * 24 * 60 * 60 * 1000).toISOString()
      },
      { 
        id: 5, 
        name: "Magnesium + Zinc", 
        scheduledTime: "22:00", 
        completed: false, 
        currentStreak: 15,
        bestStreak: 45,
        recurrencePattern: "daily",
        category: "supplements",
        priority: "medium",
        date: new Date().toISOString(),
        createdAt: new Date(Date.now() - 50 * 24 * 60 * 60 * 1000).toISOString()
      }
    ];
    
    // Apply filters to mock data
    let filteredMockTasks = [...mockTasks];
    
    // Category filter
    if (categoryParam) {
      filteredMockTasks = filteredMockTasks.filter(task => 
        task.category === categoryParam
      );
    }
    
    // Completion status filter
    if (completedParam === 'true' || completedParam === 'false') {
      const isCompleted = completedParam === 'true';
      filteredMockTasks = filteredMockTasks.filter(task => 
        task.completed === isCompleted
      );
    }
    
    // If today flag is set, filter for tasks due today based on recurrence pattern
    if (today) {
      const now = new Date();
      const dayOfWeek = now.getDay(); // 0-6 (Sunday-Saturday)
      
      filteredMockTasks = filteredMockTasks.filter(task => {
        if (task.recurrencePattern === 'daily') return true;
        if (task.recurrencePattern === 'weekdays' && dayOfWeek >= 1 && dayOfWeek <= 5) return true;
        if (task.recurrencePattern === 'weekends' && (dayOfWeek === 0 || dayOfWeek === 6)) return true;
        if (task.recurrencePattern === 'weekly') {
          // For mock data, assume task.date is creation date and task is due if today is same day of week
          const taskDate = new Date(task.date as string);
          return taskDate.getDay() === dayOfWeek;
        }
        if (task.recurrencePattern === 'custom' && task.customRecurrenceDays) {
          return task.customRecurrenceDays.includes(dayOfWeek);
        }
        return false;
      });
    }
    
    // Sort the mock data
    filteredMockTasks.sort((a, b) => {
      const field = sortParam as keyof EnhancedTask;
      
      // Handle different field types for sorting
      if (field === 'scheduledTime') {
        return orderParam === 'desc' 
          ? b.scheduledTime.localeCompare(a.scheduledTime)
          : a.scheduledTime.localeCompare(b.scheduledTime);
      }
      
      if (field === 'name') {
        return orderParam === 'desc' 
          ? b.name.localeCompare(a.name)
          : a.name.localeCompare(b.name);
      }
      
      if (field === 'priority') {
        const priorityValue = {
          'low': 1,
          'medium': 2,
          'high': 3
        };
        
        const valueA = priorityValue[a.priority as TaskPriority] || 0;
        const valueB = priorityValue[b.priority as TaskPriority] || 0;
        
        return orderParam === 'desc' ? valueB - valueA : valueA - valueB;
      }
      
      // Default numeric fields
      const valueA = a[field] as number || 0;
      const valueB = b[field] as number || 0;
      
      return orderParam === 'desc' ? valueB - valueA : valueA - valueB;
    });
    
    // Apply pagination to mock data
    const paginatedMockTasks = filteredMockTasks.slice(skip, skip + limit);
    
    // Return mock data with pagination
    return NextResponse.json<ApiResponse<EnhancedTask[]>>({
      success: true,
      data: paginatedMockTasks,
      pagination: {
        total: filteredMockTasks.length,
        page,
        limit,
        pages: Math.ceil(filteredMockTasks.length / limit)
      }
    });
  } catch (error) {
    console.error('Error in GET /api/tasks:', error);
    return NextResponse.json<ApiResponse<never>>({ 
      success: false, 
      message: 'Error fetching tasks',
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

/**
 * POST /api/tasks
 * 
 * Creates a new task with validation and user association
 * 
 * Required fields:
 * - name: task name
 * - scheduledTime: time in HH:MM format
 * 
 * Optional fields:
 * - recurrencePattern: 'daily', 'weekdays', 'weekends', 'weekly', or 'custom'
 * - customRecurrenceDays: array of numbers 0-6 (required if recurrencePattern is 'custom')
 * - category: string
 * - priority: 'low', 'medium', or 'high'
 * - date: date when task was created or task becomes active
 */
export async function POST(req: NextRequest) {
  try {
    await dbConnect();
    const session = await getAuth();
    
    // For development, allow access even without authentication
    if (!session && process.env.NODE_ENV === 'production') {
      return NextResponse.json<ApiResponse<never>>({ 
        success: false, 
        message: 'Unauthorized' 
      }, { status: 401 });
    }
    
    const body = await req.json();
    
    // Validate required fields
    if (!body.name || typeof body.name !== 'string' || body.name.trim() === '') {
      return NextResponse.json<ApiResponse<never>>({ 
        success: false, 
        message: 'Task name is required and must be a non-empty string' 
      }, { status: 400 });
    }
    
    if (!body.scheduledTime || !/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(body.scheduledTime)) {
      return NextResponse.json<ApiResponse<never>>({ 
        success: false, 
        message: 'Scheduled time is required and must be in HH:MM format' 
      }, { status: 400 });
    }
    
    // Validate recurrence pattern if provided
    if (body.recurrencePattern && 
        !['daily', 'weekdays', 'weekends', 'weekly', 'custom'].includes(body.recurrencePattern)) {
      return NextResponse.json<ApiResponse<never>>({ 
        success: false, 
        message: 'Invalid recurrence pattern' 
      }, { status: 400 });
    }
    
    // Validate customRecurrenceDays if recurrence pattern is 'custom'
    if (body.recurrencePattern === 'custom') {
      if (!Array.isArray(body.customRecurrenceDays) || 
          body.customRecurrenceDays.length === 0 ||
          !body.customRecurrenceDays.every((day: any) => 
            typeof day === 'number' && day >= 0 && day <= 6
          )) {
        return NextResponse.json<ApiResponse<never>>({ 
          success: false, 
          message: 'Custom recurrence days must be a non-empty array of numbers 0-6 (Sunday to Saturday)' 
        }, { status: 400 });
      }
    }
    
    // Validate priority if provided
    if (body.priority && !['low', 'medium', 'high'].includes(body.priority)) {
      return NextResponse.json<ApiResponse<never>>({ 
        success: false, 
        message: 'Priority must be one of: low, medium, high' 
      }, { status: 400 });
    }
    
    // Parse date if provided
    let taskDate: Date | undefined;
    if (body.date) {
      taskDate = new Date(body.date);
      if (isNaN(taskDate.getTime())) {
        return NextResponse.json<ApiResponse<never>>({ 
          success: false, 
          message: 'Invalid date format' 
        }, { status: 400 });
      }
    }
    
    // Create a task object with validated fields
    const taskData = {
      name: body.name.trim(),
      scheduledTime: body.scheduledTime,
      recurrencePattern: body.recurrencePattern as RecurrencePattern || 'daily',
      customRecurrenceDays: body.recurrencePattern === 'custom' ? body.customRecurrenceDays : [],
      category: typeof body.category === 'string' ? body.category.trim() : 'general',
      priority: body.priority as TaskPriority || 'medium',
      completed: false,
      currentStreak: 0,
      bestStreak: 0,
      user: session?.user?.id || 'development',
      date: taskDate || new Date(),
      lastCompletedDate: null,
      completionHistory: []
    };
    
    // If we have a real user session, create in the database
    if (session?.user?.id) {
      const task = await Task.create(taskData);
      const enhancedTask = convertTaskToEnhancedTask(task);
      
      return NextResponse.json<ApiResponse<EnhancedTask>>({ 
        success: true, 
        data: enhancedTask,
        message: 'Task created successfully'
      }, { status: 201 });
    }
    
    // For development without session, just echo back with an ID
    const mockTask: EnhancedTask = {
      id: Date.now(),
      ...taskData,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    return NextResponse.json<ApiResponse<EnhancedTask>>({ 
      success: true, 
      data: mockTask,
      message: 'Task created successfully (mock)'
    }, { status: 201 });
  } catch (error) {
    console.error('Error in POST /api/tasks:', error);
    return NextResponse.json<ApiResponse<never>>({ 
      success: false, 
      message: 'Error creating task',
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}